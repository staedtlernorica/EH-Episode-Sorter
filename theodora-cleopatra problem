from datetime import date
today = str(date.today())
eh_csv = 'Extra History Playlist'+ ' ' + today +".csv" 
folder = "/Users/Work/Desktop/EH Youtube/"

import csv
with open(folder+eh_csv, newline='', encoding='UTF-8') as f:
	reader = csv.reader(f)
	data = list(reader)


import re
series_first = []
series_rest = []
singles_music_lies = []
all_episodes = []

#seperates videos into 3 non-overlapping categories: first episodes of a series,
#the other numbered episodes of the series, and singles/music/lies videos
for video in data:
	
	all_episodes.append(video[0])

	#b/c normal string search of #1 also matched (Justinian &) Theodora #10 
	if len(re.findall('\\b1\\b', video[0])) == 1:
		series_first.append(video[0])
	elif '#' not in video[0]:
		singles_music_lies.append(video[0])
	else:
		series_rest.append(video[0])
#-------------------------------------------------------------------------------------------
#only take in the names right now; need to remove [0] to get
#views, dates, likes, dislikes, comments
#-------------------------------------------------------------------------------------------




#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------
#Only when need to re-print separated videos
'''
path = '/Users/Work/Desktop/'
with open(path+'series_first.csv', 'w', newline='',encoding='UTF-8') as csvfile:
	csvwriter = csv.writer(csvfile)
	for currentRow in series_first:
		csvwriter.writerow(currentRow)
		#print(currentRow)
with open(path+'series_rest.csv', 'w', newline='',encoding='UTF-8') as csvfile:
	csvwriter = csv.writer(csvfile)
	for currentRow in series_rest:
		csvwriter.writerow(currentRow)
		#print(currentRow)
with open(path+'singles_music_lies.csv', 'w', newline='',encoding='UTF-8') as csvfile:
	csvwriter = csv.writer(csvfile)
	for currentRow in singles_music_lies:
		csvwriter.writerow(currentRow)
		#print(currentRow)  
'''
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------




#-------------------------------------------------------------------------------------------
#https://stackoverflow.com/questions/653157/
#John Rutledge with NinjaMeTimbers modification
#-------------------------------------------------------------------------------------------
def get_bigrams(string):
	"""
	Take a string and return a list of bigrams.
	"""
	s = string.lower()
	return [s[i:i+2] for i in list(range(len(s) - 1))]

def string_similarity(str1, str2):
	"""
	Perform bigram comparison between two strings
	and return a percentage match in decimal form.
	"""
	pairs1 = get_bigrams(str1)
	pairs2 = get_bigrams(str2)
	union  = len(pairs1) + len(pairs2)
	hit_count = 0
	for x in pairs1:
		for y in pairs2:
			if x == y:
				hit_count += 1
				pairs2.remove(y)
				break

	#sometimes union == 0, and get divide by zero error without this
	if union == 0:
		return 0

	return (2.0 * hit_count) / union
#-------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------



def first_three_words(name_string):

	#if name_string = 'The Haitian Revolution - Liberation - Extra History - #4'

	#' '.join vs ''.join gives different string output
	#[:5] gives best result so far
	#'' and [:5] gives best result so far, only two mismatch
	#first_three = ' '.join(name_string.split()[:5])	#>> 'The Haitian Revolution'
	before_dash = name_string.split('-')[0]	#>> 'TheHaitianRevolution'
	print(before_dash)
	return before_dash



#compared episode with the first videos
#return a list of all scores
def compared_with_first(episode, series_name = series_first):

	episode_scores = []
	for i in series_name:
		x = first_three_words(episode)
		y = first_three_words(i)
		#comparison_score = round(string_similarity(episode, i),4)
		comparison_score = round(string_similarity(x,y),4)
		episode_scores.append((comparison_score, i))
		
	return episode_scores


matches = []
for i in series_rest:
	scores_list = compared_with_first(i)
	similarity_score = 0
	most_likely_match = []
	for score in scores_list:
		if score[0] > similarity_score:
			similarity_score = score[0]
			most_likely_match.clear()		#MIGHT HAVE BEEN THE CRUCIAL KEY 
			most_likely_match.append((i,score)) 
	matches.append(most_likely_match)


final_match = []
for i in matches:
	print(i[0][1])
	final_match.append((i[0][0], i[0][1][1], i[0][1][0]))
	#final_match.append(i)


import csv
#path = '/Users/Work/Desktop/csv test printing/'	#print to folder on Desktop 
path = '/Users/Work/Desktop/EH Youtube/'						#print to Desktop	
#newline='' helps prevent line skipping when printing entry
#https://stackoverflow.com/questions/3348460/csv-file-written-with-python-has-blank-lines-between-each-row
#-------------------------------------------------------------------------------------
#encoding='UTF-8', or will run into UnicodeEncodeError, eg with EH episode
#â™« Admiral Yi: Drums of War - Sean and Dean Kiner - Extra History Music
#https://stackoverflow.com/questions/37490428/unicodeencodeerror-with-csv-writer
with open('test.csv', 'w', newline='',encoding='UTF-8') as csvfile:
	csvwriter = csv.writer(csvfile)
	for currentRow in final_match:
		csvwriter.writerow(currentRow)
		#print(currentRow)


